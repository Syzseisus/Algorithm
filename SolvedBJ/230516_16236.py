import sys
from collections import deque as dq

# region: test case
#          1  2   3   4   5   6    7   8   9  10  11  12  13  14  15  16  17   18   19
Ns      = [3, 3,  4,  6,  6,  6,  20,  6,  2,  2,  5,  7,  7,  7,  6,  6,  10,  10, 10]
answers = [0, 3, 14, 60, 48, 39, 913,  0,  2,  3, 31, 67, 59,  5, 55, 48, 103, 105, 87]
spaces = [
    [[0, 0, 0], [0, 0, 0], [0, 9, 0]],
    [[0, 0, 1], [0, 0, 0], [0, 9, 0]],
    [[4, 3, 2, 1], [0, 0, 0, 0], [0, 0, 9, 0], [1, 2, 3, 4]],
    [[5, 4, 3, 2, 3, 4], [4, 3, 2, 3, 4, 5], [3, 2, 9, 5, 6, 6], [2, 1, 2, 3, 4, 5], [3, 2, 1, 6, 5, 4], [6, 6, 6, 6, 6, 6]],
    [[6, 0, 6, 0, 6, 1], [0, 0, 0, 0, 0, 2], [2, 3, 4, 5, 6, 6], [0, 0, 0, 0, 0, 2], [0, 2, 0, 0, 0, 0], [3, 9, 3, 0, 0, 1]],
    [[1, 1, 1, 1, 1, 1], [2, 2, 6, 2, 2, 3], [2, 2, 5, 2, 2, 3], [2, 2, 2, 4, 6, 3], [0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 9]],
    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 4], [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4]],
    [[1, 2, 0, 3, 1, 6], [1, 0, 5, 0, 0, 0], [1, 0, 2, 0, 2, 0], [0, 1, 4, 0, 2, 5], [6, 6, 3, 0, 3, 3], [4, 9, 6, 0, 2, 2]],
    [[9, 1], [4, 1]],
    [[9, 1], [2, 1]],
    [[3, 3, 2, 4, 3], [1, 4, 5, 3, 1], [1, 4, 3, 3, 2], [4, 3, 2, 3, 1], [3, 3, 1, 3, 9]],
    [[3, 5, 0, 6, 4, 5, 5], [1, 6, 3, 3, 0, 2, 2], [6, 2, 1, 3, 1, 5, 1], [9, 2, 2, 3, 4, 2, 3], [2, 1, 6, 2, 0, 0, 4], [4, 5, 0, 6, 1, 1, 0], [5, 4, 3, 2, 1, 4, 0]],
    [[2, 0, 6, 1, 2, 4, 1], [2, 0, 0, 0, 1, 6, 1], [3, 5, 1, 0, 2, 5, 0], [3, 0, 0, 9, 1, 0, 4], [6, 1, 1, 0, 2, 1, 6], [0, 0, 4, 0, 4, 1, 2], [5, 0, 0, 0, 4, 0, 2]],
    [[0, 0, 4, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
    [[2, 9, 6, 2, 5, 6], [5, 1, 0, 4, 0, 0], [5, 3, 1, 4, 0, 5], [2, 0, 6, 4, 1, 0], [0, 2, 1, 5, 1, 5], [1, 2, 2, 6, 4, 6]],
    [[0, 4, 4, 3, 0, 6], [0, 0, 3, 5, 4, 2], [1, 4, 1, 3, 6, 2], [0, 0, 2, 1, 9, 0], [1, 3, 5, 4, 6, 0], [2, 5, 6, 2, 1, 0]],
    [[0, 1, 4, 6, 1, 4, 5, 4, 0, 3], [2, 0, 0, 9, 0, 0, 6, 0, 0, 0], [4, 3, 2, 4, 6, 3, 0, 2, 1, 6], [0, 0, 0, 0, 1, 0, 0, 1, 0, 6], [0, 0, 0, 5, 0, 4, 1, 4, 0, 1], [0, 3, 0, 1, 6, 0, 3, 1, 0, 4], [6, 5, 0, 2, 0, 0, 5, 1, 0, 1], [0, 4, 0, 4, 1, 1, 2, 5, 6, 6], [1, 0, 5, 6, 5, 1, 0, 1, 2, 0], [5, 6, 3, 0, 6, 0, 1, 1, 6, 0]],
    [[5, 6, 3, 0, 5, 5, 4, 4, 3, 0], [2, 4, 0, 4, 0, 1, 0, 1, 0, 6], [0, 3, 4, 1, 0, 0, 3, 1, 1, 0], [0, 5, 1, 0, 1, 6, 1, 3, 5, 1], [0, 3, 0, 1, 1, 0, 4, 0, 1, 0], [0, 5, 1, 5, 6, 0, 3, 4, 0, 9], [0, 5, 5, 3, 0, 0, 4, 5, 0, 3], [2, 5, 0, 3, 3, 2, 0, 0, 3, 2], [2, 6, 5, 0, 0, 4, 1, 1, 6, 3], [1, 3, 1, 3, 0, 1, 0, 0, 0, 5]],
    [[2, 0, 2, 0, 1, 1, 1, 0, 1, 0], [0, 4, 4, 0, 4, 0, 0, 0, 3, 0], [4, 3, 5, 0, 1, 0, 2, 6, 0, 0], [0, 0, 5, 5, 3, 1, 3, 1, 3, 4], [6, 0, 5, 1, 4, 2, 4, 0, 5, 0], [0, 0, 5, 0, 2, 1, 1, 2, 1, 0], [2, 0, 5, 2, 4, 0, 9, 1, 6, 2], [4, 1, 2, 0, 3, 0, 3, 2, 4, 6], [3, 0, 1, 0, 4, 0, 0, 5, 0, 1], [0, 4, 1, 1, 6, 6, 1, 6, 0, 0]],
]
# endregion

# helpers
# move up, left, right, down via BFS
def bfs(curr_r, curr_c, size):
    q = dq([(curr_r, curr_c)])
    dist = [[0 for _ in range(N)] for _ in range(N)]
    visited = [[0 for _ in range(N)] for _ in range(N)]

    visited[curr_r][curr_c] = 1
    eatable = []
    while q:
        r, c = q.popleft()
        for dr, dc in ((-1, 0), (0, -1), (0, 1), (1, 0)):
            nr, nc = r + dr, c + dc
            if 0 <= nr < N and 0 <= nc < N and not visited[nr][nc]:
                # 먹고 이동하기
                if space[nr][nc] <= size:
                    q.append((nr, nc))
                    dist[nr][nc] = dist[r][c] + 1
                    visited[nr][nc] = True

                    if space[nr][nc] < size and space[nr][nc]:
                        eatable.append((dist[nr][nc], nr, nc))
    
    eatable.sort(reverse=True)

    return eatable

# # get input
# N = int(sys.stdin.readline())
# space = [list(map(int, sys.stdin.readline().strip().split())) for _ in range(N)]

hit = 0
for i in range(len(Ns)):
    N = Ns[i]
    space = spaces[i]
    answer = answers[i]

    # init shark
    for r in range(N):
        for c in range(N):
            if space[r][c] == 9:
                curr_r, curr_c = r, c
                size = 2
                space[r][c] = 0
                break

    # main
    res = 0
    eat = 0
    while True:
        feed = bfs(curr_r, curr_c, size)
        if not len(feed):
            break

        dist, nr, nc = feed.pop()

        res += dist
        space[curr_r][curr_c], space[nr][nc] = 0, 0

        curr_r, curr_c = nr, nc
        eat += 1
        if eat == size:
            size += 1
            eat = 0
        
    print(i + 1, res, answer, res == answer)
    if res == answer:
        hit += 1

        

print(hit / len(Ns))